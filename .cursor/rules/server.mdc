---
description: 用于该项目的服务端代码的规则
alwaysApply: false
---

## 技术栈

**严格遵循下面的技术栈**

- golang. (版本: v1.24.4)
- gofiber. (版本: v2)
- gorm
- sqlite
- jwt

其中 go 的版本为`1.24.4`，因此可以的话尽管使用最新的 go 特性

## 代码结构

`/server`中存放服务端代码，遵循以下 go 项目结构:

```
project/
├── cmd/ # 主程序入口
├── internal
│   ├── models # 模型代码
│   │   ├── module1          # 模块1
│   │   ├── module2          # 模块2
│   │   └── module3          # 模块3
│   ├── service # 逻辑服务代码
│   │   ├── module1          # 模块1
│   │   ├── module2          # 模块2
│   │   └── module3          # 模块3
│   ├── router # 路由
│   │   ├── module1          # 模块1
│   │   ├── module2          # 模块2
│   │   └── module3          # 模块3
│   ├── db # 数据库
│   │   ├── migrations             # 迁移文件
│   │   ├── connection.go          # 数据库连接
│   │   ├── migration.go           # 数据库迁移
│   │   └── seed.go                # 数据填充
│   ├── utils # 工具
├── configs/ # 配置文件
```

## 规范

- 使用有意义的变量名：避免缩写，使用描述性的名称。
- 代码要有优雅的注释(并不是所有的地方都需要注释)。
- 显式错误处理：始终检查并处理错误，不要忽略它们。
- 并发编程, 使用 channel 进行通信, 在需要超时、取消或传递请求范围值的场景中使用 context.Context, 避免 goroutine 泄漏。
- 减少内存分配：重用对象，使用对象池，避免在热路径中频繁分配内存。
- 使用切片而非数组：在大多数情况下，切片比数组更灵活高效。
- 预分配容量：在知道大概大小时，为切片和映射预分配容量。
- 用 go mod 管理依赖，保持 go.mod 文件简洁。
