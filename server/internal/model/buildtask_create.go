// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"minidevops/internal/model/buildtask"
	"minidevops/internal/model/project"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BuildTaskCreate is the builder for creating a BuildTask entity.
type BuildTaskCreate struct {
	config
	mutation *BuildTaskMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (btc *BuildTaskCreate) SetStatus(b buildtask.Status) *BuildTaskCreate {
	btc.mutation.SetStatus(b)
	return btc
}

// SetLogPath sets the "log_path" field.
func (btc *BuildTaskCreate) SetLogPath(s string) *BuildTaskCreate {
	btc.mutation.SetLogPath(s)
	return btc
}

// SetNillableLogPath sets the "log_path" field if the given value is not nil.
func (btc *BuildTaskCreate) SetNillableLogPath(s *string) *BuildTaskCreate {
	if s != nil {
		btc.SetLogPath(*s)
	}
	return btc
}

// SetDuration sets the "duration" field.
func (btc *BuildTaskCreate) SetDuration(i int) *BuildTaskCreate {
	btc.mutation.SetDuration(i)
	return btc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (btc *BuildTaskCreate) SetNillableDuration(i *int) *BuildTaskCreate {
	if i != nil {
		btc.SetDuration(*i)
	}
	return btc
}

// SetStartedAt sets the "started_at" field.
func (btc *BuildTaskCreate) SetStartedAt(t time.Time) *BuildTaskCreate {
	btc.mutation.SetStartedAt(t)
	return btc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (btc *BuildTaskCreate) SetNillableStartedAt(t *time.Time) *BuildTaskCreate {
	if t != nil {
		btc.SetStartedAt(*t)
	}
	return btc
}

// SetFinishedAt sets the "finished_at" field.
func (btc *BuildTaskCreate) SetFinishedAt(t time.Time) *BuildTaskCreate {
	btc.mutation.SetFinishedAt(t)
	return btc
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (btc *BuildTaskCreate) SetNillableFinishedAt(t *time.Time) *BuildTaskCreate {
	if t != nil {
		btc.SetFinishedAt(*t)
	}
	return btc
}

// SetCreatedAt sets the "created_at" field.
func (btc *BuildTaskCreate) SetCreatedAt(t time.Time) *BuildTaskCreate {
	btc.mutation.SetCreatedAt(t)
	return btc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (btc *BuildTaskCreate) SetProjectID(id int) *BuildTaskCreate {
	btc.mutation.SetProjectID(id)
	return btc
}

// SetProject sets the "project" edge to the Project entity.
func (btc *BuildTaskCreate) SetProject(p *Project) *BuildTaskCreate {
	return btc.SetProjectID(p.ID)
}

// Mutation returns the BuildTaskMutation object of the builder.
func (btc *BuildTaskCreate) Mutation() *BuildTaskMutation {
	return btc.mutation
}

// Save creates the BuildTask in the database.
func (btc *BuildTaskCreate) Save(ctx context.Context) (*BuildTask, error) {
	return withHooks(ctx, btc.sqlSave, btc.mutation, btc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (btc *BuildTaskCreate) SaveX(ctx context.Context) *BuildTask {
	v, err := btc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btc *BuildTaskCreate) Exec(ctx context.Context) error {
	_, err := btc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btc *BuildTaskCreate) ExecX(ctx context.Context) {
	if err := btc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btc *BuildTaskCreate) check() error {
	if _, ok := btc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`model: missing required field "BuildTask.status"`)}
	}
	if v, ok := btc.mutation.Status(); ok {
		if err := buildtask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`model: validator failed for field "BuildTask.status": %w`, err)}
		}
	}
	if _, ok := btc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`model: missing required field "BuildTask.created_at"`)}
	}
	if _, ok := btc.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project", err: errors.New(`model: missing required edge "BuildTask.project"`)}
	}
	return nil
}

func (btc *BuildTaskCreate) sqlSave(ctx context.Context) (*BuildTask, error) {
	if err := btc.check(); err != nil {
		return nil, err
	}
	_node, _spec := btc.createSpec()
	if err := sqlgraph.CreateNode(ctx, btc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	btc.mutation.id = &_node.ID
	btc.mutation.done = true
	return _node, nil
}

func (btc *BuildTaskCreate) createSpec() (*BuildTask, *sqlgraph.CreateSpec) {
	var (
		_node = &BuildTask{config: btc.config}
		_spec = sqlgraph.NewCreateSpec(buildtask.Table, sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt))
	)
	if value, ok := btc.mutation.Status(); ok {
		_spec.SetField(buildtask.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := btc.mutation.LogPath(); ok {
		_spec.SetField(buildtask.FieldLogPath, field.TypeString, value)
		_node.LogPath = value
	}
	if value, ok := btc.mutation.Duration(); ok {
		_spec.SetField(buildtask.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := btc.mutation.StartedAt(); ok {
		_spec.SetField(buildtask.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := btc.mutation.FinishedAt(); ok {
		_spec.SetField(buildtask.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = &value
	}
	if value, ok := btc.mutation.CreatedAt(); ok {
		_spec.SetField(buildtask.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := btc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildtask.ProjectTable,
			Columns: []string{buildtask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_builds = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BuildTaskCreateBulk is the builder for creating many BuildTask entities in bulk.
type BuildTaskCreateBulk struct {
	config
	err      error
	builders []*BuildTaskCreate
}

// Save creates the BuildTask entities in the database.
func (btcb *BuildTaskCreateBulk) Save(ctx context.Context) ([]*BuildTask, error) {
	if btcb.err != nil {
		return nil, btcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(btcb.builders))
	nodes := make([]*BuildTask, len(btcb.builders))
	mutators := make([]Mutator, len(btcb.builders))
	for i := range btcb.builders {
		func(i int, root context.Context) {
			builder := btcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BuildTaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, btcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, btcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, btcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (btcb *BuildTaskCreateBulk) SaveX(ctx context.Context) []*BuildTask {
	v, err := btcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (btcb *BuildTaskCreateBulk) Exec(ctx context.Context) error {
	_, err := btcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btcb *BuildTaskCreateBulk) ExecX(ctx context.Context) {
	if err := btcb.Exec(ctx); err != nil {
		panic(err)
	}
}
