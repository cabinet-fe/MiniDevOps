// Code generated by ent, DO NOT EDIT.

package project

import (
	"minidevops/internal/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// RepoURL applies equality check predicate on the "repo_url" field. It's identical to RepoURLEQ.
func RepoURL(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRepoURL, v))
}

// Branch applies equality check predicate on the "branch" field. It's identical to BranchEQ.
func Branch(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBranch, v))
}

// BuildCmd applies equality check predicate on the "build_cmd" field. It's identical to BuildCmdEQ.
func BuildCmd(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBuildCmd, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// LastBuildAt applies equality check predicate on the "last_build_at" field. It's identical to LastBuildAtEQ.
func LastBuildAt(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLastBuildAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldName, v))
}

// RepoURLEQ applies the EQ predicate on the "repo_url" field.
func RepoURLEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldRepoURL, v))
}

// RepoURLNEQ applies the NEQ predicate on the "repo_url" field.
func RepoURLNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldRepoURL, v))
}

// RepoURLIn applies the In predicate on the "repo_url" field.
func RepoURLIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldRepoURL, vs...))
}

// RepoURLNotIn applies the NotIn predicate on the "repo_url" field.
func RepoURLNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldRepoURL, vs...))
}

// RepoURLGT applies the GT predicate on the "repo_url" field.
func RepoURLGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldRepoURL, v))
}

// RepoURLGTE applies the GTE predicate on the "repo_url" field.
func RepoURLGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldRepoURL, v))
}

// RepoURLLT applies the LT predicate on the "repo_url" field.
func RepoURLLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldRepoURL, v))
}

// RepoURLLTE applies the LTE predicate on the "repo_url" field.
func RepoURLLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldRepoURL, v))
}

// RepoURLContains applies the Contains predicate on the "repo_url" field.
func RepoURLContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldRepoURL, v))
}

// RepoURLHasPrefix applies the HasPrefix predicate on the "repo_url" field.
func RepoURLHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldRepoURL, v))
}

// RepoURLHasSuffix applies the HasSuffix predicate on the "repo_url" field.
func RepoURLHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldRepoURL, v))
}

// RepoURLEqualFold applies the EqualFold predicate on the "repo_url" field.
func RepoURLEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldRepoURL, v))
}

// RepoURLContainsFold applies the ContainsFold predicate on the "repo_url" field.
func RepoURLContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldRepoURL, v))
}

// BranchEQ applies the EQ predicate on the "branch" field.
func BranchEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBranch, v))
}

// BranchNEQ applies the NEQ predicate on the "branch" field.
func BranchNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldBranch, v))
}

// BranchIn applies the In predicate on the "branch" field.
func BranchIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldBranch, vs...))
}

// BranchNotIn applies the NotIn predicate on the "branch" field.
func BranchNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldBranch, vs...))
}

// BranchGT applies the GT predicate on the "branch" field.
func BranchGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldBranch, v))
}

// BranchGTE applies the GTE predicate on the "branch" field.
func BranchGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldBranch, v))
}

// BranchLT applies the LT predicate on the "branch" field.
func BranchLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldBranch, v))
}

// BranchLTE applies the LTE predicate on the "branch" field.
func BranchLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldBranch, v))
}

// BranchContains applies the Contains predicate on the "branch" field.
func BranchContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldBranch, v))
}

// BranchHasPrefix applies the HasPrefix predicate on the "branch" field.
func BranchHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldBranch, v))
}

// BranchHasSuffix applies the HasSuffix predicate on the "branch" field.
func BranchHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldBranch, v))
}

// BranchEqualFold applies the EqualFold predicate on the "branch" field.
func BranchEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldBranch, v))
}

// BranchContainsFold applies the ContainsFold predicate on the "branch" field.
func BranchContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldBranch, v))
}

// BuildCmdEQ applies the EQ predicate on the "build_cmd" field.
func BuildCmdEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldBuildCmd, v))
}

// BuildCmdNEQ applies the NEQ predicate on the "build_cmd" field.
func BuildCmdNEQ(v string) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldBuildCmd, v))
}

// BuildCmdIn applies the In predicate on the "build_cmd" field.
func BuildCmdIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldBuildCmd, vs...))
}

// BuildCmdNotIn applies the NotIn predicate on the "build_cmd" field.
func BuildCmdNotIn(vs ...string) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldBuildCmd, vs...))
}

// BuildCmdGT applies the GT predicate on the "build_cmd" field.
func BuildCmdGT(v string) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldBuildCmd, v))
}

// BuildCmdGTE applies the GTE predicate on the "build_cmd" field.
func BuildCmdGTE(v string) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldBuildCmd, v))
}

// BuildCmdLT applies the LT predicate on the "build_cmd" field.
func BuildCmdLT(v string) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldBuildCmd, v))
}

// BuildCmdLTE applies the LTE predicate on the "build_cmd" field.
func BuildCmdLTE(v string) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldBuildCmd, v))
}

// BuildCmdContains applies the Contains predicate on the "build_cmd" field.
func BuildCmdContains(v string) predicate.Project {
	return predicate.Project(sql.FieldContains(FieldBuildCmd, v))
}

// BuildCmdHasPrefix applies the HasPrefix predicate on the "build_cmd" field.
func BuildCmdHasPrefix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasPrefix(FieldBuildCmd, v))
}

// BuildCmdHasSuffix applies the HasSuffix predicate on the "build_cmd" field.
func BuildCmdHasSuffix(v string) predicate.Project {
	return predicate.Project(sql.FieldHasSuffix(FieldBuildCmd, v))
}

// BuildCmdEqualFold applies the EqualFold predicate on the "build_cmd" field.
func BuildCmdEqualFold(v string) predicate.Project {
	return predicate.Project(sql.FieldEqualFold(FieldBuildCmd, v))
}

// BuildCmdContainsFold applies the ContainsFold predicate on the "build_cmd" field.
func BuildCmdContainsFold(v string) predicate.Project {
	return predicate.Project(sql.FieldContainsFold(FieldBuildCmd, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldUpdatedAt, v))
}

// LastBuildAtEQ applies the EQ predicate on the "last_build_at" field.
func LastBuildAtEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldEQ(FieldLastBuildAt, v))
}

// LastBuildAtNEQ applies the NEQ predicate on the "last_build_at" field.
func LastBuildAtNEQ(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldNEQ(FieldLastBuildAt, v))
}

// LastBuildAtIn applies the In predicate on the "last_build_at" field.
func LastBuildAtIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldIn(FieldLastBuildAt, vs...))
}

// LastBuildAtNotIn applies the NotIn predicate on the "last_build_at" field.
func LastBuildAtNotIn(vs ...time.Time) predicate.Project {
	return predicate.Project(sql.FieldNotIn(FieldLastBuildAt, vs...))
}

// LastBuildAtGT applies the GT predicate on the "last_build_at" field.
func LastBuildAtGT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGT(FieldLastBuildAt, v))
}

// LastBuildAtGTE applies the GTE predicate on the "last_build_at" field.
func LastBuildAtGTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldGTE(FieldLastBuildAt, v))
}

// LastBuildAtLT applies the LT predicate on the "last_build_at" field.
func LastBuildAtLT(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLT(FieldLastBuildAt, v))
}

// LastBuildAtLTE applies the LTE predicate on the "last_build_at" field.
func LastBuildAtLTE(v time.Time) predicate.Project {
	return predicate.Project(sql.FieldLTE(FieldLastBuildAt, v))
}

// LastBuildAtIsNil applies the IsNil predicate on the "last_build_at" field.
func LastBuildAtIsNil() predicate.Project {
	return predicate.Project(sql.FieldIsNull(FieldLastBuildAt))
}

// LastBuildAtNotNil applies the NotNil predicate on the "last_build_at" field.
func LastBuildAtNotNil() predicate.Project {
	return predicate.Project(sql.FieldNotNull(FieldLastBuildAt))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBuilds applies the HasEdge predicate on the "builds" edge.
func HasBuilds() predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BuildsTable, BuildsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBuildsWith applies the HasEdge predicate on the "builds" edge with a given conditions (other predicates).
func HasBuildsWith(preds ...predicate.BuildTask) predicate.Project {
	return predicate.Project(func(s *sql.Selector) {
		step := newBuildsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Project) predicate.Project {
	return predicate.Project(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Project) predicate.Project {
	return predicate.Project(sql.NotPredicates(p))
}
