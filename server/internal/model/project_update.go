// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"minidevops/internal/model/buildtask"
	"minidevops/internal/model/predicate"
	"minidevops/internal/model/project"
	"minidevops/internal/model/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (pu *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProjectUpdate) SetName(s string) *ProjectUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableName(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetRepoURL sets the "repo_url" field.
func (pu *ProjectUpdate) SetRepoURL(s string) *ProjectUpdate {
	pu.mutation.SetRepoURL(s)
	return pu
}

// SetNillableRepoURL sets the "repo_url" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableRepoURL(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetRepoURL(*s)
	}
	return pu
}

// SetBranch sets the "branch" field.
func (pu *ProjectUpdate) SetBranch(s string) *ProjectUpdate {
	pu.mutation.SetBranch(s)
	return pu
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBranch(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetBranch(*s)
	}
	return pu
}

// SetBuildCmd sets the "build_cmd" field.
func (pu *ProjectUpdate) SetBuildCmd(s string) *ProjectUpdate {
	pu.mutation.SetBuildCmd(s)
	return pu
}

// SetNillableBuildCmd sets the "build_cmd" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableBuildCmd(s *string) *ProjectUpdate {
	if s != nil {
		pu.SetBuildCmd(*s)
	}
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProjectUpdate) SetUpdatedAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableUpdatedAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// SetLastBuildAt sets the "last_build_at" field.
func (pu *ProjectUpdate) SetLastBuildAt(t time.Time) *ProjectUpdate {
	pu.mutation.SetLastBuildAt(t)
	return pu
}

// SetNillableLastBuildAt sets the "last_build_at" field if the given value is not nil.
func (pu *ProjectUpdate) SetNillableLastBuildAt(t *time.Time) *ProjectUpdate {
	if t != nil {
		pu.SetLastBuildAt(*t)
	}
	return pu
}

// ClearLastBuildAt clears the value of the "last_build_at" field.
func (pu *ProjectUpdate) ClearLastBuildAt() *ProjectUpdate {
	pu.mutation.ClearLastBuildAt()
	return pu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (pu *ProjectUpdate) SetOwnerID(id int) *ProjectUpdate {
	pu.mutation.SetOwnerID(id)
	return pu
}

// SetOwner sets the "owner" edge to the User entity.
func (pu *ProjectUpdate) SetOwner(u *User) *ProjectUpdate {
	return pu.SetOwnerID(u.ID)
}

// AddBuildIDs adds the "builds" edge to the BuildTask entity by IDs.
func (pu *ProjectUpdate) AddBuildIDs(ids ...int) *ProjectUpdate {
	pu.mutation.AddBuildIDs(ids...)
	return pu
}

// AddBuilds adds the "builds" edges to the BuildTask entity.
func (pu *ProjectUpdate) AddBuilds(b ...*BuildTask) *ProjectUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.AddBuildIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (pu *ProjectUpdate) Mutation() *ProjectMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (pu *ProjectUpdate) ClearOwner() *ProjectUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// ClearBuilds clears all "builds" edges to the BuildTask entity.
func (pu *ProjectUpdate) ClearBuilds() *ProjectUpdate {
	pu.mutation.ClearBuilds()
	return pu
}

// RemoveBuildIDs removes the "builds" edge to BuildTask entities by IDs.
func (pu *ProjectUpdate) RemoveBuildIDs(ids ...int) *ProjectUpdate {
	pu.mutation.RemoveBuildIDs(ids...)
	return pu
}

// RemoveBuilds removes "builds" edges to BuildTask entities.
func (pu *ProjectUpdate) RemoveBuilds(b ...*BuildTask) *ProjectUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return pu.RemoveBuildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProjectUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProjectUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProjectUpdate) check() error {
	if _, ok := pu.mutation.OwnerID(); pu.mutation.OwnerCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Project.owner"`)
	}
	return nil
}

func (pu *ProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.RepoURL(); ok {
		_spec.SetField(project.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := pu.mutation.Branch(); ok {
		_spec.SetField(project.FieldBranch, field.TypeString, value)
	}
	if value, ok := pu.mutation.BuildCmd(); ok {
		_spec.SetField(project.FieldBuildCmd, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.LastBuildAt(); ok {
		_spec.SetField(project.FieldLastBuildAt, field.TypeTime, value)
	}
	if pu.mutation.LastBuildAtCleared() {
		_spec.ClearField(project.FieldLastBuildAt, field.TypeTime)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BuildsTable,
			Columns: []string{project.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBuildsIDs(); len(nodes) > 0 && !pu.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BuildsTable,
			Columns: []string{project.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BuildsTable,
			Columns: []string{project.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetName sets the "name" field.
func (puo *ProjectUpdateOne) SetName(s string) *ProjectUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableName(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetRepoURL sets the "repo_url" field.
func (puo *ProjectUpdateOne) SetRepoURL(s string) *ProjectUpdateOne {
	puo.mutation.SetRepoURL(s)
	return puo
}

// SetNillableRepoURL sets the "repo_url" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableRepoURL(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetRepoURL(*s)
	}
	return puo
}

// SetBranch sets the "branch" field.
func (puo *ProjectUpdateOne) SetBranch(s string) *ProjectUpdateOne {
	puo.mutation.SetBranch(s)
	return puo
}

// SetNillableBranch sets the "branch" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBranch(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetBranch(*s)
	}
	return puo
}

// SetBuildCmd sets the "build_cmd" field.
func (puo *ProjectUpdateOne) SetBuildCmd(s string) *ProjectUpdateOne {
	puo.mutation.SetBuildCmd(s)
	return puo
}

// SetNillableBuildCmd sets the "build_cmd" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableBuildCmd(s *string) *ProjectUpdateOne {
	if s != nil {
		puo.SetBuildCmd(*s)
	}
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProjectUpdateOne) SetUpdatedAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableUpdatedAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// SetLastBuildAt sets the "last_build_at" field.
func (puo *ProjectUpdateOne) SetLastBuildAt(t time.Time) *ProjectUpdateOne {
	puo.mutation.SetLastBuildAt(t)
	return puo
}

// SetNillableLastBuildAt sets the "last_build_at" field if the given value is not nil.
func (puo *ProjectUpdateOne) SetNillableLastBuildAt(t *time.Time) *ProjectUpdateOne {
	if t != nil {
		puo.SetLastBuildAt(*t)
	}
	return puo
}

// ClearLastBuildAt clears the value of the "last_build_at" field.
func (puo *ProjectUpdateOne) ClearLastBuildAt() *ProjectUpdateOne {
	puo.mutation.ClearLastBuildAt()
	return puo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (puo *ProjectUpdateOne) SetOwnerID(id int) *ProjectUpdateOne {
	puo.mutation.SetOwnerID(id)
	return puo
}

// SetOwner sets the "owner" edge to the User entity.
func (puo *ProjectUpdateOne) SetOwner(u *User) *ProjectUpdateOne {
	return puo.SetOwnerID(u.ID)
}

// AddBuildIDs adds the "builds" edge to the BuildTask entity by IDs.
func (puo *ProjectUpdateOne) AddBuildIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.AddBuildIDs(ids...)
	return puo
}

// AddBuilds adds the "builds" edges to the BuildTask entity.
func (puo *ProjectUpdateOne) AddBuilds(b ...*BuildTask) *ProjectUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.AddBuildIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (puo *ProjectUpdateOne) Mutation() *ProjectMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (puo *ProjectUpdateOne) ClearOwner() *ProjectUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// ClearBuilds clears all "builds" edges to the BuildTask entity.
func (puo *ProjectUpdateOne) ClearBuilds() *ProjectUpdateOne {
	puo.mutation.ClearBuilds()
	return puo
}

// RemoveBuildIDs removes the "builds" edge to BuildTask entities by IDs.
func (puo *ProjectUpdateOne) RemoveBuildIDs(ids ...int) *ProjectUpdateOne {
	puo.mutation.RemoveBuildIDs(ids...)
	return puo
}

// RemoveBuilds removes "builds" edges to BuildTask entities.
func (puo *ProjectUpdateOne) RemoveBuilds(b ...*BuildTask) *ProjectUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return puo.RemoveBuildIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (puo *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Project entity.
func (puo *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProjectUpdateOne) check() error {
	if _, ok := puo.mutation.OwnerID(); puo.mutation.OwnerCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "Project.owner"`)
	}
	return nil
}

func (puo *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(project.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.RepoURL(); ok {
		_spec.SetField(project.FieldRepoURL, field.TypeString, value)
	}
	if value, ok := puo.mutation.Branch(); ok {
		_spec.SetField(project.FieldBranch, field.TypeString, value)
	}
	if value, ok := puo.mutation.BuildCmd(); ok {
		_spec.SetField(project.FieldBuildCmd, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.LastBuildAt(); ok {
		_spec.SetField(project.FieldLastBuildAt, field.TypeTime, value)
	}
	if puo.mutation.LastBuildAtCleared() {
		_spec.ClearField(project.FieldLastBuildAt, field.TypeTime)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   project.OwnerTable,
			Columns: []string{project.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BuildsTable,
			Columns: []string{project.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBuildsIDs(); len(nodes) > 0 && !puo.mutation.BuildsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BuildsTable,
			Columns: []string{project.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BuildsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.BuildsTable,
			Columns: []string{project.BuildsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
