// Code generated by ent, DO NOT EDIT.

package model

import (
	"fmt"
	"minidevops/internal/model/buildtask"
	"minidevops/internal/model/project"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BuildTask is the model entity for the BuildTask schema.
type BuildTask struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status buildtask.Status `json:"status,omitempty"`
	// LogPath holds the value of the "log_path" field.
	LogPath string `json:"log_path,omitempty"`
	// 构建持续时间（秒）
	Duration int `json:"duration,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// FinishedAt holds the value of the "finished_at" field.
	FinishedAt *time.Time `json:"finished_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BuildTaskQuery when eager-loading is set.
	Edges          BuildTaskEdges `json:"edges"`
	project_builds *int
	selectValues   sql.SelectValues
}

// BuildTaskEdges holds the relations/edges for other nodes in the graph.
type BuildTaskEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BuildTaskEdges) ProjectOrErr() (*Project, error) {
	if e.loadedTypes[0] {
		if e.Project == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: project.Label}
		}
		return e.Project, nil
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BuildTask) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case buildtask.FieldID, buildtask.FieldDuration:
			values[i] = new(sql.NullInt64)
		case buildtask.FieldStatus, buildtask.FieldLogPath:
			values[i] = new(sql.NullString)
		case buildtask.FieldStartedAt, buildtask.FieldFinishedAt, buildtask.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case buildtask.ForeignKeys[0]: // project_builds
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BuildTask fields.
func (bt *BuildTask) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case buildtask.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			bt.ID = int(value.Int64)
		case buildtask.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				bt.Status = buildtask.Status(value.String)
			}
		case buildtask.FieldLogPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field log_path", values[i])
			} else if value.Valid {
				bt.LogPath = value.String
			}
		case buildtask.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				bt.Duration = int(value.Int64)
			}
		case buildtask.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				bt.StartedAt = value.Time
			}
		case buildtask.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finished_at", values[i])
			} else if value.Valid {
				bt.FinishedAt = new(time.Time)
				*bt.FinishedAt = value.Time
			}
		case buildtask.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				bt.CreatedAt = value.Time
			}
		case buildtask.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_builds", value)
			} else if value.Valid {
				bt.project_builds = new(int)
				*bt.project_builds = int(value.Int64)
			}
		default:
			bt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BuildTask.
// This includes values selected through modifiers, order, etc.
func (bt *BuildTask) Value(name string) (ent.Value, error) {
	return bt.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the BuildTask entity.
func (bt *BuildTask) QueryProject() *ProjectQuery {
	return NewBuildTaskClient(bt.config).QueryProject(bt)
}

// Update returns a builder for updating this BuildTask.
// Note that you need to call BuildTask.Unwrap() before calling this method if this BuildTask
// was returned from a transaction, and the transaction was committed or rolled back.
func (bt *BuildTask) Update() *BuildTaskUpdateOne {
	return NewBuildTaskClient(bt.config).UpdateOne(bt)
}

// Unwrap unwraps the BuildTask entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (bt *BuildTask) Unwrap() *BuildTask {
	_tx, ok := bt.config.driver.(*txDriver)
	if !ok {
		panic("model: BuildTask is not a transactional entity")
	}
	bt.config.driver = _tx.drv
	return bt
}

// String implements the fmt.Stringer.
func (bt *BuildTask) String() string {
	var builder strings.Builder
	builder.WriteString("BuildTask(")
	builder.WriteString(fmt.Sprintf("id=%v, ", bt.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", bt.Status))
	builder.WriteString(", ")
	builder.WriteString("log_path=")
	builder.WriteString(bt.LogPath)
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", bt.Duration))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(bt.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := bt.FinishedAt; v != nil {
		builder.WriteString("finished_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(bt.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BuildTasks is a parsable slice of BuildTask.
type BuildTasks []*BuildTask
