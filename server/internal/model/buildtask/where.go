// Code generated by ent, DO NOT EDIT.

package buildtask

import (
	"minidevops/internal/model/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLTE(FieldID, id))
}

// LogPath applies equality check predicate on the "log_path" field. It's identical to LogPathEQ.
func LogPath(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldLogPath, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldDuration, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldFinishedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotIn(FieldStatus, vs...))
}

// LogPathEQ applies the EQ predicate on the "log_path" field.
func LogPathEQ(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldLogPath, v))
}

// LogPathNEQ applies the NEQ predicate on the "log_path" field.
func LogPathNEQ(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNEQ(FieldLogPath, v))
}

// LogPathIn applies the In predicate on the "log_path" field.
func LogPathIn(vs ...string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIn(FieldLogPath, vs...))
}

// LogPathNotIn applies the NotIn predicate on the "log_path" field.
func LogPathNotIn(vs ...string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotIn(FieldLogPath, vs...))
}

// LogPathGT applies the GT predicate on the "log_path" field.
func LogPathGT(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGT(FieldLogPath, v))
}

// LogPathGTE applies the GTE predicate on the "log_path" field.
func LogPathGTE(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGTE(FieldLogPath, v))
}

// LogPathLT applies the LT predicate on the "log_path" field.
func LogPathLT(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLT(FieldLogPath, v))
}

// LogPathLTE applies the LTE predicate on the "log_path" field.
func LogPathLTE(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLTE(FieldLogPath, v))
}

// LogPathContains applies the Contains predicate on the "log_path" field.
func LogPathContains(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldContains(FieldLogPath, v))
}

// LogPathHasPrefix applies the HasPrefix predicate on the "log_path" field.
func LogPathHasPrefix(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldHasPrefix(FieldLogPath, v))
}

// LogPathHasSuffix applies the HasSuffix predicate on the "log_path" field.
func LogPathHasSuffix(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldHasSuffix(FieldLogPath, v))
}

// LogPathIsNil applies the IsNil predicate on the "log_path" field.
func LogPathIsNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIsNull(FieldLogPath))
}

// LogPathNotNil applies the NotNil predicate on the "log_path" field.
func LogPathNotNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotNull(FieldLogPath))
}

// LogPathEqualFold applies the EqualFold predicate on the "log_path" field.
func LogPathEqualFold(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEqualFold(FieldLogPath, v))
}

// LogPathContainsFold applies the ContainsFold predicate on the "log_path" field.
func LogPathContainsFold(v string) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldContainsFold(FieldLogPath, v))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotNull(FieldDuration))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finished_at" field.
func FinishedAtIsNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finished_at" field.
func FinishedAtNotNil() predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotNull(FieldFinishedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BuildTask {
	return predicate.BuildTask(sql.FieldLTE(FieldCreatedAt, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.BuildTask {
	return predicate.BuildTask(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BuildTask) predicate.BuildTask {
	return predicate.BuildTask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BuildTask) predicate.BuildTask {
	return predicate.BuildTask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BuildTask) predicate.BuildTask {
	return predicate.BuildTask(sql.NotPredicates(p))
}
