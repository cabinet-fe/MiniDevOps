// Code generated by ent, DO NOT EDIT.

package model

import (
	"context"
	"errors"
	"fmt"
	"minidevops/internal/model/buildtask"
	"minidevops/internal/model/predicate"
	"minidevops/internal/model/project"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BuildTaskUpdate is the builder for updating BuildTask entities.
type BuildTaskUpdate struct {
	config
	hooks    []Hook
	mutation *BuildTaskMutation
}

// Where appends a list predicates to the BuildTaskUpdate builder.
func (btu *BuildTaskUpdate) Where(ps ...predicate.BuildTask) *BuildTaskUpdate {
	btu.mutation.Where(ps...)
	return btu
}

// SetStatus sets the "status" field.
func (btu *BuildTaskUpdate) SetStatus(b buildtask.Status) *BuildTaskUpdate {
	btu.mutation.SetStatus(b)
	return btu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (btu *BuildTaskUpdate) SetNillableStatus(b *buildtask.Status) *BuildTaskUpdate {
	if b != nil {
		btu.SetStatus(*b)
	}
	return btu
}

// SetLogPath sets the "log_path" field.
func (btu *BuildTaskUpdate) SetLogPath(s string) *BuildTaskUpdate {
	btu.mutation.SetLogPath(s)
	return btu
}

// SetNillableLogPath sets the "log_path" field if the given value is not nil.
func (btu *BuildTaskUpdate) SetNillableLogPath(s *string) *BuildTaskUpdate {
	if s != nil {
		btu.SetLogPath(*s)
	}
	return btu
}

// ClearLogPath clears the value of the "log_path" field.
func (btu *BuildTaskUpdate) ClearLogPath() *BuildTaskUpdate {
	btu.mutation.ClearLogPath()
	return btu
}

// SetDuration sets the "duration" field.
func (btu *BuildTaskUpdate) SetDuration(i int) *BuildTaskUpdate {
	btu.mutation.ResetDuration()
	btu.mutation.SetDuration(i)
	return btu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (btu *BuildTaskUpdate) SetNillableDuration(i *int) *BuildTaskUpdate {
	if i != nil {
		btu.SetDuration(*i)
	}
	return btu
}

// AddDuration adds i to the "duration" field.
func (btu *BuildTaskUpdate) AddDuration(i int) *BuildTaskUpdate {
	btu.mutation.AddDuration(i)
	return btu
}

// ClearDuration clears the value of the "duration" field.
func (btu *BuildTaskUpdate) ClearDuration() *BuildTaskUpdate {
	btu.mutation.ClearDuration()
	return btu
}

// SetStartedAt sets the "started_at" field.
func (btu *BuildTaskUpdate) SetStartedAt(t time.Time) *BuildTaskUpdate {
	btu.mutation.SetStartedAt(t)
	return btu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (btu *BuildTaskUpdate) SetNillableStartedAt(t *time.Time) *BuildTaskUpdate {
	if t != nil {
		btu.SetStartedAt(*t)
	}
	return btu
}

// ClearStartedAt clears the value of the "started_at" field.
func (btu *BuildTaskUpdate) ClearStartedAt() *BuildTaskUpdate {
	btu.mutation.ClearStartedAt()
	return btu
}

// SetFinishedAt sets the "finished_at" field.
func (btu *BuildTaskUpdate) SetFinishedAt(t time.Time) *BuildTaskUpdate {
	btu.mutation.SetFinishedAt(t)
	return btu
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (btu *BuildTaskUpdate) SetNillableFinishedAt(t *time.Time) *BuildTaskUpdate {
	if t != nil {
		btu.SetFinishedAt(*t)
	}
	return btu
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (btu *BuildTaskUpdate) ClearFinishedAt() *BuildTaskUpdate {
	btu.mutation.ClearFinishedAt()
	return btu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (btu *BuildTaskUpdate) SetProjectID(id int) *BuildTaskUpdate {
	btu.mutation.SetProjectID(id)
	return btu
}

// SetProject sets the "project" edge to the Project entity.
func (btu *BuildTaskUpdate) SetProject(p *Project) *BuildTaskUpdate {
	return btu.SetProjectID(p.ID)
}

// Mutation returns the BuildTaskMutation object of the builder.
func (btu *BuildTaskUpdate) Mutation() *BuildTaskMutation {
	return btu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (btu *BuildTaskUpdate) ClearProject() *BuildTaskUpdate {
	btu.mutation.ClearProject()
	return btu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (btu *BuildTaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, btu.sqlSave, btu.mutation, btu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (btu *BuildTaskUpdate) SaveX(ctx context.Context) int {
	affected, err := btu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (btu *BuildTaskUpdate) Exec(ctx context.Context) error {
	_, err := btu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btu *BuildTaskUpdate) ExecX(ctx context.Context) {
	if err := btu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btu *BuildTaskUpdate) check() error {
	if v, ok := btu.mutation.Status(); ok {
		if err := buildtask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`model: validator failed for field "BuildTask.status": %w`, err)}
		}
	}
	if _, ok := btu.mutation.ProjectID(); btu.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "BuildTask.project"`)
	}
	return nil
}

func (btu *BuildTaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := btu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(buildtask.Table, buildtask.Columns, sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt))
	if ps := btu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btu.mutation.Status(); ok {
		_spec.SetField(buildtask.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := btu.mutation.LogPath(); ok {
		_spec.SetField(buildtask.FieldLogPath, field.TypeString, value)
	}
	if btu.mutation.LogPathCleared() {
		_spec.ClearField(buildtask.FieldLogPath, field.TypeString)
	}
	if value, ok := btu.mutation.Duration(); ok {
		_spec.SetField(buildtask.FieldDuration, field.TypeInt, value)
	}
	if value, ok := btu.mutation.AddedDuration(); ok {
		_spec.AddField(buildtask.FieldDuration, field.TypeInt, value)
	}
	if btu.mutation.DurationCleared() {
		_spec.ClearField(buildtask.FieldDuration, field.TypeInt)
	}
	if value, ok := btu.mutation.StartedAt(); ok {
		_spec.SetField(buildtask.FieldStartedAt, field.TypeTime, value)
	}
	if btu.mutation.StartedAtCleared() {
		_spec.ClearField(buildtask.FieldStartedAt, field.TypeTime)
	}
	if value, ok := btu.mutation.FinishedAt(); ok {
		_spec.SetField(buildtask.FieldFinishedAt, field.TypeTime, value)
	}
	if btu.mutation.FinishedAtCleared() {
		_spec.ClearField(buildtask.FieldFinishedAt, field.TypeTime)
	}
	if btu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildtask.ProjectTable,
			Columns: []string{buildtask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildtask.ProjectTable,
			Columns: []string{buildtask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, btu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	btu.mutation.done = true
	return n, nil
}

// BuildTaskUpdateOne is the builder for updating a single BuildTask entity.
type BuildTaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BuildTaskMutation
}

// SetStatus sets the "status" field.
func (btuo *BuildTaskUpdateOne) SetStatus(b buildtask.Status) *BuildTaskUpdateOne {
	btuo.mutation.SetStatus(b)
	return btuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (btuo *BuildTaskUpdateOne) SetNillableStatus(b *buildtask.Status) *BuildTaskUpdateOne {
	if b != nil {
		btuo.SetStatus(*b)
	}
	return btuo
}

// SetLogPath sets the "log_path" field.
func (btuo *BuildTaskUpdateOne) SetLogPath(s string) *BuildTaskUpdateOne {
	btuo.mutation.SetLogPath(s)
	return btuo
}

// SetNillableLogPath sets the "log_path" field if the given value is not nil.
func (btuo *BuildTaskUpdateOne) SetNillableLogPath(s *string) *BuildTaskUpdateOne {
	if s != nil {
		btuo.SetLogPath(*s)
	}
	return btuo
}

// ClearLogPath clears the value of the "log_path" field.
func (btuo *BuildTaskUpdateOne) ClearLogPath() *BuildTaskUpdateOne {
	btuo.mutation.ClearLogPath()
	return btuo
}

// SetDuration sets the "duration" field.
func (btuo *BuildTaskUpdateOne) SetDuration(i int) *BuildTaskUpdateOne {
	btuo.mutation.ResetDuration()
	btuo.mutation.SetDuration(i)
	return btuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (btuo *BuildTaskUpdateOne) SetNillableDuration(i *int) *BuildTaskUpdateOne {
	if i != nil {
		btuo.SetDuration(*i)
	}
	return btuo
}

// AddDuration adds i to the "duration" field.
func (btuo *BuildTaskUpdateOne) AddDuration(i int) *BuildTaskUpdateOne {
	btuo.mutation.AddDuration(i)
	return btuo
}

// ClearDuration clears the value of the "duration" field.
func (btuo *BuildTaskUpdateOne) ClearDuration() *BuildTaskUpdateOne {
	btuo.mutation.ClearDuration()
	return btuo
}

// SetStartedAt sets the "started_at" field.
func (btuo *BuildTaskUpdateOne) SetStartedAt(t time.Time) *BuildTaskUpdateOne {
	btuo.mutation.SetStartedAt(t)
	return btuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (btuo *BuildTaskUpdateOne) SetNillableStartedAt(t *time.Time) *BuildTaskUpdateOne {
	if t != nil {
		btuo.SetStartedAt(*t)
	}
	return btuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (btuo *BuildTaskUpdateOne) ClearStartedAt() *BuildTaskUpdateOne {
	btuo.mutation.ClearStartedAt()
	return btuo
}

// SetFinishedAt sets the "finished_at" field.
func (btuo *BuildTaskUpdateOne) SetFinishedAt(t time.Time) *BuildTaskUpdateOne {
	btuo.mutation.SetFinishedAt(t)
	return btuo
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (btuo *BuildTaskUpdateOne) SetNillableFinishedAt(t *time.Time) *BuildTaskUpdateOne {
	if t != nil {
		btuo.SetFinishedAt(*t)
	}
	return btuo
}

// ClearFinishedAt clears the value of the "finished_at" field.
func (btuo *BuildTaskUpdateOne) ClearFinishedAt() *BuildTaskUpdateOne {
	btuo.mutation.ClearFinishedAt()
	return btuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (btuo *BuildTaskUpdateOne) SetProjectID(id int) *BuildTaskUpdateOne {
	btuo.mutation.SetProjectID(id)
	return btuo
}

// SetProject sets the "project" edge to the Project entity.
func (btuo *BuildTaskUpdateOne) SetProject(p *Project) *BuildTaskUpdateOne {
	return btuo.SetProjectID(p.ID)
}

// Mutation returns the BuildTaskMutation object of the builder.
func (btuo *BuildTaskUpdateOne) Mutation() *BuildTaskMutation {
	return btuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (btuo *BuildTaskUpdateOne) ClearProject() *BuildTaskUpdateOne {
	btuo.mutation.ClearProject()
	return btuo
}

// Where appends a list predicates to the BuildTaskUpdate builder.
func (btuo *BuildTaskUpdateOne) Where(ps ...predicate.BuildTask) *BuildTaskUpdateOne {
	btuo.mutation.Where(ps...)
	return btuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (btuo *BuildTaskUpdateOne) Select(field string, fields ...string) *BuildTaskUpdateOne {
	btuo.fields = append([]string{field}, fields...)
	return btuo
}

// Save executes the query and returns the updated BuildTask entity.
func (btuo *BuildTaskUpdateOne) Save(ctx context.Context) (*BuildTask, error) {
	return withHooks(ctx, btuo.sqlSave, btuo.mutation, btuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (btuo *BuildTaskUpdateOne) SaveX(ctx context.Context) *BuildTask {
	node, err := btuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (btuo *BuildTaskUpdateOne) Exec(ctx context.Context) error {
	_, err := btuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (btuo *BuildTaskUpdateOne) ExecX(ctx context.Context) {
	if err := btuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (btuo *BuildTaskUpdateOne) check() error {
	if v, ok := btuo.mutation.Status(); ok {
		if err := buildtask.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`model: validator failed for field "BuildTask.status": %w`, err)}
		}
	}
	if _, ok := btuo.mutation.ProjectID(); btuo.mutation.ProjectCleared() && !ok {
		return errors.New(`model: clearing a required unique edge "BuildTask.project"`)
	}
	return nil
}

func (btuo *BuildTaskUpdateOne) sqlSave(ctx context.Context) (_node *BuildTask, err error) {
	if err := btuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(buildtask.Table, buildtask.Columns, sqlgraph.NewFieldSpec(buildtask.FieldID, field.TypeInt))
	id, ok := btuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`model: missing "BuildTask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := btuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, buildtask.FieldID)
		for _, f := range fields {
			if !buildtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("model: invalid field %q for query", f)}
			}
			if f != buildtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := btuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := btuo.mutation.Status(); ok {
		_spec.SetField(buildtask.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := btuo.mutation.LogPath(); ok {
		_spec.SetField(buildtask.FieldLogPath, field.TypeString, value)
	}
	if btuo.mutation.LogPathCleared() {
		_spec.ClearField(buildtask.FieldLogPath, field.TypeString)
	}
	if value, ok := btuo.mutation.Duration(); ok {
		_spec.SetField(buildtask.FieldDuration, field.TypeInt, value)
	}
	if value, ok := btuo.mutation.AddedDuration(); ok {
		_spec.AddField(buildtask.FieldDuration, field.TypeInt, value)
	}
	if btuo.mutation.DurationCleared() {
		_spec.ClearField(buildtask.FieldDuration, field.TypeInt)
	}
	if value, ok := btuo.mutation.StartedAt(); ok {
		_spec.SetField(buildtask.FieldStartedAt, field.TypeTime, value)
	}
	if btuo.mutation.StartedAtCleared() {
		_spec.ClearField(buildtask.FieldStartedAt, field.TypeTime)
	}
	if value, ok := btuo.mutation.FinishedAt(); ok {
		_spec.SetField(buildtask.FieldFinishedAt, field.TypeTime, value)
	}
	if btuo.mutation.FinishedAtCleared() {
		_spec.ClearField(buildtask.FieldFinishedAt, field.TypeTime)
	}
	if btuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildtask.ProjectTable,
			Columns: []string{buildtask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := btuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   buildtask.ProjectTable,
			Columns: []string{buildtask.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BuildTask{config: btuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, btuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{buildtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	btuo.mutation.done = true
	return _node, nil
}
